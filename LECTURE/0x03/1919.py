""" 입력
첫째 줄과 둘째 줄: 1 <= 단어의 길이 <= 1000인 영어 단어가 소문자로 입력"""
""" 출력
첫째 줄: 답을 출력"""

a = input()
b = input()
freq = [0] * 26

for ch in a:
    freq[ord(ch) - ord('a')] += 1
for ch in b:
    freq[ord(ch) - ord('a')] -= 1

print(sum(abs(x) for x in freq))

"""설명
- 알파벳은 소문자 26개이므로, 리스트 인덱스로 직접 접근 가능 → 매우 빠름
- ord(ch) - ord('a')를 통해 'a' ~ 'z'를 0 ~ 25 인덱스로 매핑
- 첫 번째 문자열은 +1, 두 번째는 -1로 처리 후,
- 최종 리스트의 절댓값 합계를 구하면 삭제해야 할 총 문자 수"""

""" 시간복잡도: O(N + M)
- N: 첫 번째 문자열 길이 (최대 1000)
- M: 두 번째 문자열 길이 (최대 1000)
- 각 문자에 대해 리스트 접근, 덧셈, 뺄셈, 총합: 전부 O(1) per op"""
""" 공간복잡도: O(1)
- 리스트 크기 고정 (26칸): 상수 공간 사용
- 입력 문자열만 추가 공간 사용: O(N + M)"""